{"ast":null,"code":"var _jsxFileName = \"/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/lib/SpotifyAuth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react'; // Variables used to serve up the loginUrl to the Spotify API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize'; // Auth endpoint\n\nconst redirectUri = 'http://localhost:3000/'; // redirect url after user is logged in\n\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005'; // our client ID\n\nconst spaceDelimiter = '%20';\nconst scopes = [// The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n'user-read-playback-state', 'user-read-recently-played', 'user-read-currently-playing', 'user-top-read', 'user-modify-playback-state', 'user-follow-modify', 'user-follow-read', 'user-library-modify'];\nconst scopesUrlParam = scopes.join(spaceDelimiter);\n\nconst getReturnedParamsFromSpotifyAuth = hash => {\n  const stringAfterHashtag = hash.substring(1);\n  const paramsInUrl = stringAfterHashtag.split('&');\n  const paramsSplitUp = paramsInUrl.reduce((accumulater, currentValue) => {\n    // console.log(currentValue)\n    const [key, value] = currentValue.split('=');\n    accumulater[key] = value;\n    return accumulater;\n  }, {});\n  return paramsSplitUp;\n};\n\nconst SpotifyAuth = () => {\n  _s();\n\n  useEffect(() => {\n    if (window.location.hash) {\n      const {\n        access_token,\n        expires_in,\n        token_type\n      } = getReturnedParamsFromSpotifyAuth(window.location.hash);\n      localStorage.clear();\n      localStorage.setItem('accessToken', access_token);\n      localStorage.setItem('tokenType', token_type);\n      localStorage.setItem('expiresIn', expires_in);\n    }\n  });\n\n  const handleLogin = () => {\n    window.location = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopesUrlParam}&response_type=token&show_dialog=true`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hi\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"login to spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SpotifyAuth, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = SpotifyAuth;\nexport default SpotifyAuth; // Final url sent to Spotify API for login in required format from documentation\n\nexport const loginUrl = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`; // As the Spotify access token is different to the localstorage token and is required for functionality, pulling the ?\n\nexport const getAccessToken = () => {\n  return window.location.hash.substring(1).split('&').reduce((initial, item) => {\n    let parts = item.split('=');\n    initial[parts[0]] = decodeURIComponent(parts[1]); // console.log(initial)\n\n    return initial;\n  }, {});\n};\nexport const setToken = token => {\n  window.localStorage.setItem('setting the token', token);\n};\nexport const getToken = () => {\n  return window.localStorage.getItem('getting the token');\n};\nexport const bearerToken = () => {\n  return getAccessToken().access_token;\n};\nconsole.log('this is the bearer token', bearerToken());\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyAuth\");","map":{"version":3,"sources":["/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/lib/SpotifyAuth.js"],"names":["React","useEffect","spotifyAuthEndpoint","redirectUri","clientID","spaceDelimiter","scopes","scopesUrlParam","join","getReturnedParamsFromSpotifyAuth","hash","stringAfterHashtag","substring","paramsInUrl","split","paramsSplitUp","reduce","accumulater","currentValue","key","value","SpotifyAuth","window","location","access_token","expires_in","token_type","localStorage","clear","setItem","handleLogin","loginUrl","getAccessToken","initial","item","parts","decodeURIComponent","setToken","token","getToken","getItem","bearerToken","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\n\n// Variables used to serve up the loginUrl to the Spotify API\n\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize' // Auth endpoint\nconst redirectUri = 'http://localhost:3000/' // redirect url after user is logged in\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005' // our client ID\nconst spaceDelimiter = '%20'\nconst scopes = [\n  // The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n  'user-read-playback-state',\n  'user-read-recently-played',\n  'user-read-currently-playing',\n  'user-top-read',\n  'user-modify-playback-state',\n  'user-follow-modify',\n  'user-follow-read',\n  'user-library-modify',\n]\n\nconst scopesUrlParam = scopes.join(spaceDelimiter)\n\nconst getReturnedParamsFromSpotifyAuth = (hash) => {\n  const stringAfterHashtag = hash.substring(1)\n  const paramsInUrl = stringAfterHashtag.split('&')\n  const paramsSplitUp = paramsInUrl.reduce((accumulater, currentValue) => {\n    // console.log(currentValue)\n    const [key, value] = currentValue.split('=')\n    accumulater[key] = value\n    return accumulater\n  }, {})\n\n  return paramsSplitUp\n}\n\nconst SpotifyAuth = () => {\n  useEffect(() => {\n    if (window.location.hash) {\n      const { access_token, expires_in, token_type } =\n        getReturnedParamsFromSpotifyAuth(window.location.hash)\n\n      localStorage.clear()\n\n      localStorage.setItem('accessToken', access_token)\n      localStorage.setItem('tokenType', token_type)\n      localStorage.setItem('expiresIn', expires_in)\n    }\n  })\n\n  const handleLogin = () => {\n    window.location = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopesUrlParam}&response_type=token&show_dialog=true`\n  }\n\n\n\n  return (\n    <div className=\"container\">\n      <h1>hi</h1>\n      <button onClick={handleLogin}>login to spotify</button>\n    </div>\n  )\n}\n\nexport default SpotifyAuth\n\n// Final url sent to Spotify API for login in required format from documentation\nexport const loginUrl = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopes.join(\n  '%20'\n)}&response_type=token&show_dialog=true`\n\n// As the Spotify access token is different to the localstorage token and is required for functionality, pulling the ?\nexport const getAccessToken = () => {\n  return window.location.hash\n    .substring(1)\n    .split('&')\n    .reduce((initial, item) => {\n      let parts = item.split('=')\n      initial[parts[0]] = decodeURIComponent(parts[1])\n      // console.log(initial)\n      return initial\n    }, {})\n}\n\n\nexport const setToken = (token) => {\n  window.localStorage.setItem('setting the token', token)\n}\n\nexport const getToken = () => {\n  return window.localStorage.getItem('getting the token')\n}\n\nexport const bearerToken = () => {\n  return getAccessToken().access_token\n}\nconsole.log('this is the bearer token', bearerToken())\n"]},"metadata":{},"sourceType":"module"}