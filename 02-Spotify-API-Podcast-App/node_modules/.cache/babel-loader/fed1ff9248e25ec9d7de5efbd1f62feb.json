{"ast":null,"code":"var _jsxFileName = \"/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/lib/SpotifyAuth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport '../styles/App.css'; // Variables used to serve up the loginUrl to the Spotify API\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize'; // Auth endpoint\n\nconst redirectUri = 'http://localhost:3000/'; // redirect url after user is logged in\n\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005'; // our client ID\n\nconst spaceDelimiter = '%20';\nconst scopes = [// The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n`user-library-read`, `user-library-modify`];\nconst scopesUrlParam = scopes.join(spaceDelimiter);\n\nconst getReturnedParamsFromSpotifyAuth = hash => {\n  const stringAfterHashtag = hash.substring(1);\n  const paramsInUrl = stringAfterHashtag.split('&');\n  const paramsSplitUp = paramsInUrl.reduce((accumulater, currentValue) => {\n    // console.log(currentValue)\n    const [key, value] = currentValue.split('=');\n    accumulater[key] = value;\n    return accumulater;\n  }, {});\n  console.log(paramsSplitUp.access_token);\n  return paramsSplitUp;\n};\n\nconst SpotifyAuth = () => {\n  _s();\n\n  const history = useHistory();\n  useEffect(() => {\n    if (window.location.hash) {\n      const {\n        access_token,\n        expires_in,\n        token_type\n      } = getReturnedParamsFromSpotifyAuth(window.location.hash);\n      localStorage.clear();\n      localStorage.setItem('accessToken', access_token);\n      localStorage.setItem('tokenType', token_type);\n      localStorage.setItem('expiresIn', expires_in);\n      history.push('/podcast');\n      console.log(history);\n    }\n  });\n\n  const handleLogin = () => {\n    window.location = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopesUrlParam}&response_type=token&show_dialog=true`;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"spotifyAuth__button\",\n      onClick: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"shape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 69\n      }, this), \"LOGIN TO SPOTIFY\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SpotifyAuth, \"bz2N+u0mX89LO9zOCfVCA9Sa20M=\", false, function () {\n  return [useHistory];\n});\n\n_c = SpotifyAuth;\nexport default SpotifyAuth;\n\nvar _c;\n\n$RefreshReg$(_c, \"SpotifyAuth\");","map":{"version":3,"sources":["/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/lib/SpotifyAuth.js"],"names":["React","useEffect","useHistory","spotifyAuthEndpoint","redirectUri","clientID","spaceDelimiter","scopes","scopesUrlParam","join","getReturnedParamsFromSpotifyAuth","hash","stringAfterHashtag","substring","paramsInUrl","split","paramsSplitUp","reduce","accumulater","currentValue","key","value","console","log","access_token","SpotifyAuth","history","window","location","expires_in","token_type","localStorage","clear","setItem","push","handleLogin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,mBAAP,C,CAEA;;;AAEA,MAAMC,mBAAmB,GAAG,wCAA5B,C,CAAqE;;AACrE,MAAMC,WAAW,GAAG,wBAApB,C,CAA6C;;AAC7C,MAAMC,QAAQ,GAAG,kCAAjB,C,CAAoD;;AACpD,MAAMC,cAAc,GAAG,KAAvB;AACA,MAAMC,MAAM,GAAG,CACb;AACC,mBAFY,EAGZ,qBAHY,CAAf;AAMA,MAAMC,cAAc,GAAGD,MAAM,CAACE,IAAP,CAAYH,cAAZ,CAAvB;;AAEA,MAAMI,gCAAgC,GAAIC,IAAD,IAAU;AACjD,QAAMC,kBAAkB,GAAGD,IAAI,CAACE,SAAL,CAAe,CAAf,CAA3B;AACA,QAAMC,WAAW,GAAGF,kBAAkB,CAACG,KAAnB,CAAyB,GAAzB,CAApB;AACA,QAAMC,aAAa,GAAGF,WAAW,CAACG,MAAZ,CAAmB,CAACC,WAAD,EAAcC,YAAd,KAA+B;AACtE;AACA,UAAM,CAACC,GAAD,EAAMC,KAAN,IAAeF,YAAY,CAACJ,KAAb,CAAmB,GAAnB,CAArB;AACAG,IAAAA,WAAW,CAACE,GAAD,CAAX,GAAmBC,KAAnB;AACA,WAAOH,WAAP;AACD,GALqB,EAKnB,EALmB,CAAtB;AAOAI,EAAAA,OAAO,CAACC,GAAR,CAAYP,aAAa,CAACQ,YAA1B;AACA,SAAOR,aAAP;AACD,CAZD;;AAcA,MAAMS,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMC,OAAO,GAAGxB,UAAU,EAA1B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,MAAM,CAACC,QAAP,CAAgBjB,IAApB,EAA0B;AACxB,YAAM;AAAEa,QAAAA,YAAF;AAAgBK,QAAAA,UAAhB;AAA4BC,QAAAA;AAA5B,UACJpB,gCAAgC,CAACiB,MAAM,CAACC,QAAP,CAAgBjB,IAAjB,CADlC;AAGAoB,MAAAA,YAAY,CAACC,KAAb;AAEAD,MAAAA,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoCT,YAApC;AACAO,MAAAA,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAkCH,UAAlC;AACAC,MAAAA,YAAY,CAACE,OAAb,CAAqB,WAArB,EAAkCJ,UAAlC;AACAH,MAAAA,OAAO,CAACQ,IAAR,CAAa,UAAb;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACD;AACF,GAbQ,CAAT;;AAeA,QAAMS,WAAW,GAAG,MAAM;AACxBR,IAAAA,MAAM,CAACC,QAAP,GAAmB,GAAEzB,mBAAoB,cAAaE,QAAS,iBAAgBD,WAAY,UAASI,cAAe,uCAAnH;AACD,GAFD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,qBAAlB;AAAwC,MAAA,OAAO,EAAE2B,WAAjD;AAAA,8BAA8D;AAAM,QAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,cAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA7BD;;GAAMV,W;UACYvB,U;;;KADZuB,W;AA+BN,eAAeA,WAAf","sourcesContent":["import React, { useEffect} from 'react'\nimport { useHistory } from 'react-router-dom'\nimport '../styles/App.css'\n\n// Variables used to serve up the loginUrl to the Spotify API\n\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize' // Auth endpoint\nconst redirectUri = 'http://localhost:3000/' // redirect url after user is logged in\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005' // our client ID\nconst spaceDelimiter = '%20'\nconst scopes = [\n  // The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n  `user-library-read`,\n  `user-library-modify`,\n]\n\nconst scopesUrlParam = scopes.join(spaceDelimiter)\n\nconst getReturnedParamsFromSpotifyAuth = (hash) => {\n  const stringAfterHashtag = hash.substring(1)\n  const paramsInUrl = stringAfterHashtag.split('&')\n  const paramsSplitUp = paramsInUrl.reduce((accumulater, currentValue) => {\n    // console.log(currentValue)\n    const [key, value] = currentValue.split('=')\n    accumulater[key] = value\n    return accumulater\n  }, {})\n\n  console.log(paramsSplitUp.access_token)\n  return paramsSplitUp\n}\n\nconst SpotifyAuth = () => {\n  const history = useHistory()\n\n  useEffect(() => {\n    if (window.location.hash) {\n      const { access_token, expires_in, token_type } =\n        getReturnedParamsFromSpotifyAuth(window.location.hash)\n\n      localStorage.clear()\n\n      localStorage.setItem('accessToken', access_token)\n      localStorage.setItem('tokenType', token_type)\n      localStorage.setItem('expiresIn', expires_in)\n      history.push('/podcast')\n      console.log(history)\n    }\n  })\n\n  const handleLogin = () => {\n    window.location = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopesUrlParam}&response_type=token&show_dialog=true`\n  }\n\n\n\n  return (\n    <div className=\"container\">\n      <button className=\"spotifyAuth__button\" onClick={handleLogin}><span className=\"shape\"></span>LOGIN TO SPOTIFY</button>\n    </div>\n  )\n}\n\nexport default SpotifyAuth\n"]},"metadata":{},"sourceType":"module"}