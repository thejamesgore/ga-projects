{"ast":null,"code":"// Variables used to serve up the loginUrl to the Spotify API\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize'; // Auth endpoint\n\nconst redirectUri = 'http://localhost:3000/'; // redirect url after user is logged in\n\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005'; // our client ID\n\nconst scopes = [// The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n'user-read-playback-state', 'user-read-recently-played', 'user-read-currently-playing', 'user-top-read', 'user-modify-playback-state', 'user-follow-modify', 'user-follow-read', 'user-library-modify']; // Final url sent to Spotify API for login in required format from documentation\n\nexport const loginUrl = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;\nexport const getBearerToken = () => {\n  let bearer = loginUrl.access_token;\n  console.log(bearer);\n  return bearer;\n}; // As the Spotify access token is different to the localstorage token and is required for functionality, pulling the ?\n// export const getAccessToken = () => {\n//   return window.location.hash\n//     .substring(1)\n//     .split('&')\n//     .reduce((initial, item) => {\n//       let parts = item.split('=')\n//       initial[parts[0]] = decodeURIComponent(parts[1])\n//       return initial\n//     }, {})\n// }","map":{"version":3,"sources":["/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/lib/Auth.js"],"names":["spotifyAuthEndpoint","redirectUri","clientID","scopes","loginUrl","join","getBearerToken","bearer","access_token","console","log"],"mappings":"AAAA;AAEA,MAAMA,mBAAmB,GAAG,wCAA5B,C,CAAqE;;AACrE,MAAMC,WAAW,GAAG,wBAApB,C,CAA6C;;AAC7C,MAAMC,QAAQ,GAAG,kCAAjB,C,CAAoD;;AACpD,MAAMC,MAAM,GAAG,CACb;AACA,0BAFa,EAGb,2BAHa,EAIb,6BAJa,EAKb,eALa,EAMb,4BANa,EAOb,oBAPa,EAQb,kBARa,EASb,qBATa,CAAf,C,CAYA;;AACA,OAAO,MAAMC,QAAQ,GAAI,GAAEJ,mBAAoB,cAAaE,QAAS,iBAAgBD,WAAY,UAASE,MAAM,CAACE,IAAP,CACxG,KADwG,CAExG,uCAFK;AAIP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,MAAIC,MAAM,GAAGH,QAAQ,CAACI,YAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,SAAOA,MAAP;AACD,CAJM,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// Variables used to serve up the loginUrl to the Spotify API\n\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize' // Auth endpoint\nconst redirectUri = 'http://localhost:3000/' // redirect url after user is logged in\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005' // our client ID\nconst scopes = [\n  // The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n  'user-read-playback-state',\n  'user-read-recently-played',\n  'user-read-currently-playing',\n  'user-top-read',\n  'user-modify-playback-state',\n  'user-follow-modify',\n  'user-follow-read',\n  'user-library-modify',\n]\n\n// Final url sent to Spotify API for login in required format from documentation\nexport const loginUrl = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopes.join(\n  '%20'\n)}&response_type=token&show_dialog=true`\n\nexport const getBearerToken = () => {\n  let bearer = loginUrl.access_token\n  console.log(bearer)\n  return bearer\n}\n\n// As the Spotify access token is different to the localstorage token and is required for functionality, pulling the ?\n// export const getAccessToken = () => {\n//   return window.location.hash\n//     .substring(1)\n//     .split('&')\n//     .reduce((initial, item) => {\n//       let parts = item.split('=')\n//       initial[parts[0]] = decodeURIComponent(parts[1])\n     \n//       return initial\n//     }, {})\n// }\n"]},"metadata":{},"sourceType":"module"}