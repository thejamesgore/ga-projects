{"ast":null,"code":"// Variables used to serve up the loginUrl to the Spotify API\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize'; // Auth endpoint\n\nconst redirectUri = 'http://localhost:3000/'; // redirect url after user is logged in\n\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005'; // our client ID\n\nconst scopes = [// The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n'user-read-playback-state', 'user-read-recently-played', 'user-read-currently-playing', 'user-top-read', 'user-modify-playback-state', 'user-follow-modify', 'user-follow-read', 'user-library-modify']; // Final url sent to Spotify API for login in required format from documentation\n\nexport const loginUrl = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`; // As the Spotify access token is different to the localstorage token and is required for functionality, pulling the\n\nexport const getAccessToken = () => {\n  return window.location.hash.substring(1).split('&').reduce((initial, item) => {\n    let parts = item.split('=');\n    initial[parts[0]] = decodeURIComponent(parts[1]);\n    console.log(initial);\n    return initial;\n  }, {});\n};","map":{"version":3,"sources":["/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/lib/Auth.js"],"names":["spotifyAuthEndpoint","redirectUri","clientID","scopes","loginUrl","join","getAccessToken","window","location","hash","substring","split","reduce","initial","item","parts","decodeURIComponent","console","log"],"mappings":"AAAA;AAEA,MAAMA,mBAAmB,GAAG,wCAA5B,C,CAAqE;;AACrE,MAAMC,WAAW,GAAG,wBAApB,C,CAA6C;;AAC7C,MAAMC,QAAQ,GAAG,kCAAjB,C,CAAoD;;AACpD,MAAMC,MAAM,GAAG,CAAG;AAChB,0BADa,EAEb,2BAFa,EAGb,6BAHa,EAIb,eAJa,EAKb,4BALa,EAMb,oBANa,EAOb,kBAPa,EAQb,qBARa,CAAf,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAI,GAAEJ,mBAAoB,cAAaE,QAAS,iBAAgBD,WAAY,UAASE,MAAM,CAACE,IAAP,CACxG,KADwG,CAExG,uCAFK,C,CAIP;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAChC,SAAOC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CACFC,SADE,CACQ,CADR,EAEFC,KAFE,CAEI,GAFJ,EAGFC,MAHE,CAGK,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACvB,QAAIC,KAAK,GAAGD,IAAI,CAACH,KAAL,CAAW,GAAX,CAAZ;AACAE,IAAAA,OAAO,CAACE,KAAK,CAAC,CAAD,CAAN,CAAP,GAAoBC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAtC;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,WAAOA,OAAP;AACH,GARE,EAQA,EARA,CAAP;AASH,CAVM","sourcesContent":["// Variables used to serve up the loginUrl to the Spotify API\n\nconst spotifyAuthEndpoint = 'https://accounts.spotify.com/authorize' // Auth endpoint\nconst redirectUri = 'http://localhost:3000/' // redirect url after user is logged in\nconst clientID = 'e74be6c70b214c6a89ffc0bb76ddd005' // our client ID\nconst scopes = [  // The functinoality we request from the Spotify API for the app. We can add further functionality by adding scopes from the spotify documentation\n  'user-read-playback-state',\n  'user-read-recently-played',\n  'user-read-currently-playing',\n  'user-top-read',\n  'user-modify-playback-state',\n  'user-follow-modify',\n  'user-follow-read',\n  'user-library-modify',\n]\n\n// Final url sent to Spotify API for login in required format from documentation\nexport const loginUrl = `${spotifyAuthEndpoint}?client_id=${clientID}&redirect_uri=${redirectUri}&scope=${scopes.join(\n  '%20'\n)}&response_type=token&show_dialog=true`\n\n// As the Spotify access token is different to the localstorage token and is required for functionality, pulling the\nexport const getAccessToken = () => {\n    return window.location.hash\n        .substring(1)\n        .split('&')\n        .reduce((initial, item) => {\n            let parts = item.split('=')\n            initial[parts[0]] = decodeURIComponent(parts[1])\n            console.log(initial)\n            return initial\n        }, {})\n}"]},"metadata":{},"sourceType":"module"}