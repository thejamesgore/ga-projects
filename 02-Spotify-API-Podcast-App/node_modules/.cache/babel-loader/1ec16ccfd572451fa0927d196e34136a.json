{"ast":null,"code":"var _jsxFileName = \"/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/components/GetPodcast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst podcastEndpoint = \"https://api.spotify.com//v1/episodes\";\n\nconst GetPodcast = () => {\n  _s();\n\n  const [token, setToken] = useState(\"\");\n  const [data, setData] = useState({});\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\")) {\n      setToken(localStorage.getItem(\"accessToken\"));\n    }\n  }, []);\n\n  const handleGetPodcasts = () => {\n    axios.get(podcastEndpoint, {\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      console.error(\"there was an error fetching podcasts\", err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetPodcasts,\n      children: \"Get Podcasts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), (data === null || data === void 0 ? void 0 : data.items) ? data.items.map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 47\n    }, this)) : null]\n  }, void 0, true);\n};\n\n_s(GetPodcast, \"Jt4HKrL1+N3K4Uvm2fmAKcJsSag=\");\n\n_c = GetPodcast;\nexport default GetPodcast;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetPodcast\");","map":{"version":3,"sources":["/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/components/GetPodcast.js"],"names":["React","useEffect","useState","axios","podcastEndpoint","GetPodcast","token","setToken","data","setData","localStorage","getItem","handleGetPodcasts","get","headers","Authorization","then","response","catch","err","console","error","items","map","item","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,eAAe,GAAG,sCAAxB;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAJ,EAAyC;AACvCJ,MAAAA,QAAQ,CAACG,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAR;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BT,IAAAA,KAAK,CACFU,GADH,CACOT,eADP,EACwB;AACpBU,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYT;AADpB;AADW,KADxB,EAMGU,IANH,CAMSC,QAAD,IAAc;AAClBR,MAAAA,OAAO,CAACQ,QAAQ,CAACT,IAAV,CAAP;AACD,KARH,EASGU,KATH,CASUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd,EAAsDF,GAAtD;AACD,KAXH;AAYD,GAbD;;AAeA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAEP,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAAAJ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEc,KAAN,IAAcd,IAAI,CAACc,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBAAU;AAAA,gBAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,YAAzB,CAAd,GAA6D,IAFhE;AAAA,kBADF;AAMD,CA/BD;;GAAMpB,U;;KAAAA,U;AAiCN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst podcastEndpoint = \"https://api.spotify.com//v1/episodes\";\n\nconst GetPodcast = () => {\n  const [token, setToken] = useState(\"\");\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    if (localStorage.getItem(\"accessToken\")) {\n      setToken(localStorage.getItem(\"accessToken\"));\n    }\n  }, []);\n\n  const handleGetPodcasts = () => {\n    axios\n      .get(podcastEndpoint, {\n        headers: {\n          Authorization: \"Bearer \" + token,\n        },\n      })\n      .then((response) => {\n        setData(response.data);\n      })\n      .catch((err) => {\n        console.error(\"there was an error fetching podcasts\", err);\n      });   \n  };\n  \n  return (\n    <>\n      <button onClick={handleGetPodcasts}>Get Podcasts</button>\n      {data?.items ? data.items.map((item) => <p>{item.name}</p>) : null}\n    </>\n  );\n};\n\nexport default GetPodcast;\n"]},"metadata":{},"sourceType":"module"}