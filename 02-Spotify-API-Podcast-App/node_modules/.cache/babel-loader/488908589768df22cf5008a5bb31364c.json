{"ast":null,"code":"var _jsxFileName = \"/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/components/GetEpisodes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useParams } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport EpisodeCard from './EpisodeCard';\nimport GetPodcast from './GetPodcast';\nimport '../styles/GetEpisodes.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst podcastEndpoint = 'https://api.spotify.com/v1/shows/4Jgtgr4mHXNDyLldHkfEMz/episodes';\nconst episodesEndpoint = 'https://api.spotify.com/v1/shows/4Jgtgr4mHXNDyLldHkfEMz/episodes'; // export const episodesEndpoint = (id) => {\n//   //   //   // this isn't working at the moment, but use the endpoint and sample showID and you can see results once taken out of the function\n//   //   //   // define show id and use the podcast ID to get the different shows\n//   //   //   // sample showID: 4Jgtgr4mHXNDyLldHkfEMz\n//   //   let podcastId = GetPodcast.item.id\n//   //   let id = podcastId\n//   // return `https://api.spotify.com/v1/shows/${id}/episodes`\n// }\n\nconst GetEpisodes = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const history = useHistory();\n  const [token, setToken] = useState('');\n  const [data, setData] = useState({});\n  const [state, setState] = React.useState({\n    podcast: null\n  });\n\n  getEpisodesfromApi = async () => {\n    try {\n      const res = await getSingleShowEpisodes(id);\n      setState({\n        podcast: res.data\n      });\n      history.push('podcast/:id/episodes');\n    } catch (err) {\n      console.error(`An error occured fetching cheese ${id}`, err);\n    }\n  };\n\n  console.log('state is', state);\n  useEffect(() => {\n    if (localStorage.getItem('accessToken')) {\n      setToken(localStorage.getItem('accessToken'));\n    }\n  }, []);\n\n  const handleGetEpisodes = () => {\n    axios.get(podcastEndpoint, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      console.error('there was an error fetching episodes', err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"episodes-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetEpisodes,\n      children: \"Get Episodes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"episodes-list\",\n      children: (data === null || data === void 0 ? void 0 : data.items) ? data.items.map(item => /*#__PURE__*/_jsxDEV(EpisodeCard, { ...item\n      }, item.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 38\n      }, this)) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 3\n  }, this);\n};\n\n_s(GetEpisodes, \"PmqEWyrinAM2fuEsSrUld0b5rfw=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = GetEpisodes;\nexport default GetEpisodes;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetEpisodes\");","map":{"version":3,"sources":["/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/components/GetEpisodes.js"],"names":["React","useEffect","useState","useParams","useHistory","axios","EpisodeCard","GetPodcast","podcastEndpoint","episodesEndpoint","GetEpisodes","id","history","token","setToken","data","setData","state","setState","podcast","getEpisodesfromApi","res","getSingleShowEpisodes","push","err","console","error","log","localStorage","getItem","handleGetEpisodes","get","headers","Authorization","then","response","catch","items","map","item","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,2BAAP;;AAEA,MAAMC,eAAe,GACnB,kEADF;AAGA,MAAMC,gBAAgB,GACpB,kEADF,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAASR,SAAS,EAAxB;AACA,QAAMS,OAAO,GAAGR,UAAU,EAA1B;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBlB,KAAK,CAACE,QAAN,CAAe;AAAEiB,IAAAA,OAAO,EAAE;AAAX,GAAf,CAA1B;;AAEAC,EAAAA,kBAAkB,GAAG,YAAY;AAC/B,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMC,qBAAqB,CAACX,EAAD,CAAvC;AACAO,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,OAAO,EAAEE,GAAG,CAACN;AAAf,OAAD,CAAR;AACAH,MAAAA,OAAO,CAACW,IAAR,CAAa,sBAAb;AACD,KAJD,CAIE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,KAAR,CAAe,oCAAmCf,EAAG,EAArD,EAAwDa,GAAxD;AACD;AACF,GARD;;AAUAC,EAAAA,OAAO,CAACE,GAAR,CAAY,UAAZ,EAAwBV,KAAxB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2B,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAJ,EAAyC;AACvCf,MAAAA,QAAQ,CAACc,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAR;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BzB,IAAAA,KAAK,CACF0B,GADH,CACOvB,eADP,EACwB;AACpBwB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYpB;AADpB;AADW,KADxB,EAMGqB,IANH,CAMSC,QAAD,IAAc;AAClBnB,MAAAA,OAAO,CAACmB,QAAQ,CAACpB,IAAV,CAAP;AACD,KARH,EASGqB,KATH,CASUZ,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd,EAAsDF,GAAtD;AACD,KAXH;AAYD,GAbD;;AAeA,sBACA;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAEM,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,gBACG,CAAAf,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEsB,KAAN,IACGtB,IAAI,CAACsB,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBAAU,QAAC,WAAD,OAAiCA;AAAjC,SAAkBA,IAAI,CAACC,IAAvB;AAAA;AAAA;AAAA;AAAA,cAAzB,CADH,GAEG;AAHN;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAUD,CAlDD;;GAAM9B,W;UACWP,S,EACCC,U;;;KAFZM,W;AAoDN,eAAeA,WAAf","sourcesContent":["import React, { useEffect, useState, useParams } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport axios from 'axios'\nimport EpisodeCard from './EpisodeCard'\nimport GetPodcast from './GetPodcast'\nimport '../styles/GetEpisodes.css'\n\nconst podcastEndpoint =\n  'https://api.spotify.com/v1/shows/4Jgtgr4mHXNDyLldHkfEMz/episodes'\n\nconst episodesEndpoint =\n  'https://api.spotify.com/v1/shows/4Jgtgr4mHXNDyLldHkfEMz/episodes'\n\n// export const episodesEndpoint = (id) => {\n//   //   //   // this isn't working at the moment, but use the endpoint and sample showID and you can see results once taken out of the function\n//   //   //   // define show id and use the podcast ID to get the different shows\n//   //   //   // sample showID: 4Jgtgr4mHXNDyLldHkfEMz\n//   //   let podcastId = GetPodcast.item.id\n//   //   let id = podcastId\n//   // return `https://api.spotify.com/v1/shows/${id}/episodes`\n// }\n\nconst GetEpisodes = () => {\n  const { id } = useParams()\n  const history = useHistory()\n  const [token, setToken] = useState('')\n  const [data, setData] = useState({})\n  const [state, setState] = React.useState({ podcast: null })\n\n  getEpisodesfromApi = async () => {\n    try {\n      const res = await getSingleShowEpisodes(id)\n      setState({ podcast: res.data })\n      history.push('podcast/:id/episodes')\n    } catch (err) {\n      console.error(`An error occured fetching cheese ${id}`, err)\n    }\n  }\n\n  console.log('state is', state)\n\n  useEffect(() => {\n    if (localStorage.getItem('accessToken')) {\n      setToken(localStorage.getItem('accessToken'))\n    }\n  }, [])\n\n  const handleGetEpisodes = () => {\n    axios\n      .get(podcastEndpoint, {\n        headers: {\n          Authorization: 'Bearer ' + token,\n        },\n      })\n      .then((response) => {\n        setData(response.data)\n      })\n      .catch((err) => {\n        console.error('there was an error fetching episodes', err)\n      })\n  }\n\n  return (\n  <div className=\"episodes-container\">\n      <button onClick={handleGetEpisodes}>Get Episodes</button>\n      <div className=\"episodes-list\">\n        {data?.items\n          ? data.items.map((item) => <EpisodeCard key={item.name} {...item} />)\n          : null}\n      </div>\n    </div>\n  )\n}\n\nexport default GetEpisodes\n"]},"metadata":{},"sourceType":"module"}