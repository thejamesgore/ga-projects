{"ast":null,"code":"var _jsxFileName = \"/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/components/GetPodcast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport PodcastCard from './PodcastCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst podcastEndpoint = 'https://api.spotify.com/v1/me/shows'; // const episodesEndpoint =\n//   'https://api.spotify.com/v1/shows/7qZAVw03FuurfYnWIWwkHY/episodes'\n\nconst GetPodcast = () => {\n  _s();\n\n  const [token, setToken] = useState('');\n  const [data, setData] = useState({});\n  useEffect(() => {\n    if (localStorage.getItem('accessToken')) {\n      setToken(localStorage.getItem('accessToken'));\n    }\n  }, []);\n  useEffect(() => {\n    handleGetPodcasts();\n  }, [setToken]);\n\n  const handleGetPodcasts = () => {\n    axios.get(podcastEndpoint, {\n      headers: {\n        Authorization: 'Bearer ' + token\n      }\n    }).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      console.error('there was an error fetching podcasts', err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: (data === null || data === void 0 ? void 0 : data.items) ? data.items.map(item => /*#__PURE__*/_jsxDEV(PodcastCard, { ...item\n    }, item.show.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)) : null\n  }, void 0, false);\n};\n\n_s(GetPodcast, \"a+n5qfaFHkwMuHkbKQ6hCxew3kY=\");\n\n_c = GetPodcast;\nexport default GetPodcast;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetPodcast\");","map":{"version":3,"sources":["/Users/jamesgore/SEI/collab-projects/spotify-podcast-app/src/components/GetPodcast.js"],"names":["React","useEffect","useState","axios","PodcastCard","podcastEndpoint","GetPodcast","token","setToken","data","setData","localStorage","getItem","handleGetPodcasts","get","headers","Authorization","then","response","catch","err","console","error","items","map","item","show","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,eAAe,GAAG,qCAAxB,C,CAEA;AACA;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAJ,EAAyC;AACvCJ,MAAAA,QAAQ,CAACG,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAD,CAAR;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMAX,EAAAA,SAAS,CAAC,MAAM;AAEdY,IAAAA,iBAAiB;AAClB,GAHQ,EAGP,CAACL,QAAD,CAHO,CAAT;;AAKA,QAAMK,iBAAiB,GAAG,MAAM;AAC9BV,IAAAA,KAAK,CACFW,GADH,CACOT,eADP,EACwB;AACpBU,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYT;AADpB;AADW,KADxB,EAMGU,IANH,CAMSC,QAAD,IAAc;AAClBR,MAAAA,OAAO,CAACQ,QAAQ,CAACT,IAAV,CAAP;AACD,KARH,EASGU,KATH,CASUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,KAAR,CAAc,sCAAd,EAAsDF,GAAtD;AACD,KAXH;AAYD,GAbD;;AAeA,sBACE;AAAA,cAEG,CAAAX,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEc,KAAN,IACGd,IAAI,CAACc,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBACb,QAAC,WAAD,OAAsCA;AAAtC,OAAkBA,IAAI,CAACC,IAAL,CAAUC,IAA5B;AAAA;AAAA;AAAA;AAAA,YADF,CADH,GAIG;AANN,mBADF;AAUD,CAxCD;;GAAMrB,U;;KAAAA,U;AA0CN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport PodcastCard from './PodcastCard'\n\nconst podcastEndpoint = 'https://api.spotify.com/v1/me/shows'\n\n// const episodesEndpoint =\n//   'https://api.spotify.com/v1/shows/7qZAVw03FuurfYnWIWwkHY/episodes'\n\nconst GetPodcast = () => {\n  const [token, setToken] = useState('')\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    if (localStorage.getItem('accessToken')) {\n      setToken(localStorage.getItem('accessToken'))\n    }\n  }, [])\n  \n  useEffect(() => {\n\n    handleGetPodcasts()\n  },[setToken])\n\n  const handleGetPodcasts = () => {\n    axios\n      .get(podcastEndpoint, {\n        headers: {\n          Authorization: 'Bearer ' + token,\n        },\n      })\n      .then((response) => {\n        setData(response.data)\n      })\n      .catch((err) => {\n        console.error('there was an error fetching podcasts', err)\n      })\n  }\n\n  return (\n    <>\n      {/* <button onClick={handleGetPodcasts}>Get Podcasts</button> */}\n      {data?.items\n        ? data.items.map((item) => (\n            <PodcastCard key={item.show.name} {...item} />\n          ))\n        : null}\n    </>\n  )\n}\n\nexport default GetPodcast\n"]},"metadata":{},"sourceType":"module"}